version: "3.3"
services:
  # Create keys and genesis
  topos-init:
    image: ghcr.io/topos-protocol/polygon-edge:${TOPOS_EDGE_VERSION}
    container_name: topos-init
    init: true
    command: ["init", "ibft"]
    environment:
      - CHAIN_ID=${TOPOS_CHAIN_ID}
      - BOOTNODE_DOMAIN_NAME=topos-node-1
    depends_on:
      contracts-init:
        condition: service_completed_successfully
    volumes:
      - topos-data:/data
      - contracts:/contracts
    networks:
      - local-erc20-messaging-infra-docker

  topos-node-1:
    image: ghcr.io/topos-protocol/polygon-edge:${TOPOS_EDGE_VERSION}
    container_name: topos-node-1
    init: true
    command:
      - "server"
      - "--data-dir"
      - "/data/data-1"
      - "--chain"
      - "/data/genesis.json"
      - "--grpc-address"
      - "0.0.0.0:9632"
      - "--libp2p"
      - "0.0.0.0:1478"
      - "--jsonrpc"
      - "0.0.0.0:8545"
      - "--price-limit"
      - ${PRICE_LIMIT}
      - "--seal"
    healthcheck:
      test: ./polygon-edge status | awk '/Number/ {print $$NF}' | tr -d '\n' | grep -v -w "0"
      interval: 5s
      retries: 10
    depends_on:
      topos-init:
        condition: service_completed_successfully
    volumes:
      - topos-data:/data
    restart: on-failure
    ports:
      - "${TOPOS_HOST_PORT}:8545"
    networks:
      - local-erc20-messaging-infra-docker

  topos-node-2:
    image: ghcr.io/topos-protocol/polygon-edge:${TOPOS_EDGE_VERSION}
    container_name: topos-node-2
    init: true
    command:
      - "server"
      - "--data-dir"
      - "/data/data-2"
      - "--chain"
      - "/data/genesis.json"
      - "--grpc-address"
      - "0.0.0.0:9632"
      - "--libp2p"
      - "0.0.0.0:1478"
      - "--jsonrpc"
      - "0.0.0.0:8545"
      - "--price-limit"
      - ${PRICE_LIMIT}
      - "--seal"
    depends_on:
      topos-init:
        condition: service_completed_successfully
    volumes:
      - topos-data:/data
    restart: on-failure
    networks:
      - local-erc20-messaging-infra-docker

  topos-node-3:
    image: ghcr.io/topos-protocol/polygon-edge:${TOPOS_EDGE_VERSION}
    container_name: topos-node-3
    init: true
    command:
      - "server"
      - "--data-dir"
      - "/data/data-3"
      - "--chain"
      - "/data/genesis.json"
      - "--grpc-address"
      - "0.0.0.0:9632"
      - "--libp2p"
      - "0.0.0.0:1478"
      - "--jsonrpc"
      - "0.0.0.0:8545"
      - "--price-limit"
      - ${PRICE_LIMIT}
      - "--seal"
    depends_on:
      topos-init:
        condition: service_completed_successfully
    volumes:
      - topos-data:/data
    restart: on-failure
    networks:
      - local-erc20-messaging-infra-docker

  topos-node-4:
    image: ghcr.io/topos-protocol/polygon-edge:${TOPOS_EDGE_VERSION}
    container_name: topos-node-4
    init: true
    command:
      - "server"
      - "--data-dir"
      - "/data/data-4"
      - "--chain"
      - "/data/genesis.json"
      - "--grpc-address"
      - "0.0.0.0:9632"
      - "--libp2p"
      - "0.0.0.0:1478"
      - "--jsonrpc"
      - "0.0.0.0:8545"
      - "--price-limit"
      - ${PRICE_LIMIT}
      - "--seal"
    depends_on:
      topos-init:
        condition: service_completed_successfully
    volumes:
      - topos-data:/data
    restart: on-failure
    networks:
      - local-erc20-messaging-infra-docker

  topos-sequencer:
    image: ghcr.io/topos-protocol/topos:${TOPOS_VERSION}
    container_name: topos-sequencer
    init: true
    healthcheck:
      test: ./topos node status --node http://localhost:1340
      interval: 5s
    volumes:
      - contracts:/contracts
      - topos-data:/data
      - shared:/tmp/shared
      - ./node_config/node/sequencer-topos/consensus/:/tmp/node_config/node/test/consensus/
      - ./node_config/node/sequencer-topos/libp2p/:/tmp/node_config/node/test/libp2p/
      - ./node_config/node/sequencer-topos/config.toml:/tmp/node_config/node/test/config.toml
      - ./node_config/subnet/topos/genesis.json:/tmp/node_config/subnet/topos/genesis.json
    depends_on:
      boot:
        condition: service_started
      contracts-topos:
        condition: service_completed_successfully
    entrypoint: ""
    ports:
      - "9090"
      - "1340"
      - "3000"
      - "4030"        
    command: bash -c "
      source /contracts/.env &&
      echo Topos core contract address=$(printenv TOPOS_CORE_PROXY_CONTRACT_ADDRESS) &&
      topos node up --name test --home /tmp/node_config --no-edge-process"
    environment:
      - LOCAL_TEST_NET=true
      - RUST_LOG=info,topos=debug
      - TOOLCHAIN_VERSION=stable
      - RUST_BACKTRACE=full
      - TOPOS_LOCAL_SUBNET_DATA_DIR=/data/data-1
      - TOPOS_OTLP_SERVICE_NAME=local-topos-sequencer
      - TOPOS_OTLP_AGENT=https://otel-collector.telemetry.devnet-1.toposware.com
      - TCE_DB_PATH=/tmp/default-db
      - TCE_API_ADDR=0.0.0.0:1340
      - TCE_GRAPHQL_API_ADDR=0.0.0.0:4030
      - TCE_METRICS_API_ADDR=0.0.0.0:3000
      - TOPOS_OTLP_SERVICE_NAME=local-tce-peer-node
      - TOPOS_OTLP_AGENT=https://grpc.otel-collector.telemetry.devnet-1.topos.technology
      - TCE_ECHO_SAMPLE_SIZE=4
      - TCE_READY_SAMPLE_SIZE=4
      - TCE_DELIVERY_SAMPLE_SIZE=4
      - TCE_ECHO_THRESHOLD=3
      - TCE_READY_THRESHOLD=1
      - TCE_DELIVERY_THRESHOLD=2
      - TOPOS_MINIMUM_TCE_CLUSTER_SIZE=3
    networks:
      - local-erc20-messaging-infra-docker

volumes:
  topos-data:
